[gcode_macro EuclidProbe]
description: config vars for Euclid probe deploy/stow
variable_batch_mode_enabled: False
variable_probe_state: None

gcode:
    RESPOND TYPE=command MSG="{ printer['gcode_macro EuclidProbe'] }"

[gcode_macro _ASSERT_PROBE_STATE]
description: ensures probe is in a known state; QUERY_PROBE must have been called before this macro!
gcode:
    ## QUERY_PROBE manually-verified results, when microswitch not depressed
    ## "TRIGGERED" -> 1 :: probe stowed
    ## "open"      -> 0 :: probe deployed
    {% set last_query_state = "stowed" if printer.probe.last_query == 1 else "deployed" %}

    {% if params.MUST_BE != last_query_state %}
        { action_raise_error("expected probe state to be {} but is {} ({})".format(params.MUST_BE, last_query_state, printer.probe.last_query)) }
    {% else %}
        ## all good; update state
        SET_GCODE_VARIABLE MACRO=EuclidProbe VARIABLE=probe_state VALUE="'{ last_query_state }'"
    {% endif %}

[gcode_macro ASSERT_PROBE_DEPLOYED]
description: error if probe not deployed
gcode:
    ; wait for moves to finish, then pause 0.25s for detection
    M400
    G4 P250

    QUERY_PROBE
    _ASSERT_PROBE_STATE MUST_BE=deployed

[gcode_macro ASSERT_PROBE_STOWED]
description: error if probe not stowed
gcode:
    ; wait for moves to finish, then pause 0.25s for detection
    M400
    G4 P250

    QUERY_PROBE
    _ASSERT_PROBE_STATE MUST_BE=stowed

[gcode_macro EUCLID_PROBE_BEGIN_BATCH]
description: begin euclid probe batch mode
gcode:
    SET_GCODE_VARIABLE MACRO=EuclidProbe VARIABLE=batch_mode_enabled VALUE=True
    RESPOND TYPE=command MSG="Probe batch mode enabled"

[gcode_macro EUCLID_PROBE_END_BATCH]
description: end euclid probe batch mode and stow probe
gcode:
    SET_GCODE_VARIABLE MACRO=EuclidProbe VARIABLE=batch_mode_enabled VALUE=False
    RESPOND TYPE=command MSG="Probe batch mode disabled"
    STOW_PROBE


[gcode_macro DEPLOY_PROBE]
description: deploy Euclid probe
gcode:
    {% set euclid_probe = printer["gcode_macro EuclidProbe"] %}

    {% if euclid_probe.batch_mode_enabled and euclid_probe.probe_state == "deployed" %}
        RESPOND TYPE=command MSG="Probe batch mode enabled: already deployed"
    {% else %}
        RESPOND TYPE=command MSG="Deploying probe"

        ; ensure the probe is currently stowed; can't deploy what isn't stowed.
        ASSERT_PROBE_STOWED

        G90 #    <----------------<----------------<----------------<----------------<----------------<------------------------------<Euclid Deploy Position<<<
        #BED MOUNT
        #G0 Z25 F800                                  ; Get a little bit of height
        #G0 X25 Y300 F5000                          ; Move directly over probe
        #G0 Z8 F800                                 ; Lower to just above probe
        #G0 X100 Y300 F3500                         ; Swipe to the side to free probe of cradle
        #G0 Z25 F800                                  ; Raise back up

        #GANTRY MOUNT
        G0 X100 Y250 F5000                         
        G0 X0 Y250 F5000                         
        G0 X0 Y298 F3500                         
        G0 X150 Y298 F5000  


        ; confirm deploy was successful
        ASSERT_PROBE_DEPLOYED

        ; move out of the dock in a straight line
        #G0 X{ euclid_probe.position_exit[0] } Y{ euclid_probe.position_exit[1] } F{ euclid_probe.move_speeds }
    {% endif %}

[gcode_macro STOW_PROBE]
description: stow Euclid probe
gcode:
    {% set euclid_probe = printer["gcode_macro EuclidProbe"] %}

    {% if euclid_probe.batch_mode_enabled %}
        RESPOND TYPE=command MSG="Probe batch mode enabled: not stowing"
    {% else %}
        RESPOND TYPE=command MSG="Stowing probe"

        ; ensure the probe is currently deployed; can't stow what isn't deployed.
        ASSERT_PROBE_DEPLOYED
        G90 #    <----------------<----------------<----------------<----------------<----------------<------------------------------<Euclid Stow Position<<<

        #BED MOUNT
        #G0 X100 Y300 F3500                         ; Get in to approach postion to stow probe
        #G0 Z7.0 F500                                 ; Lower to exact postion
        #G0 X25 Y300 F5000                          ; Move directly in to cradle
        #G0 Z30 F800                                  ; Raise to release magnets and stow probe

        #GANTRY MOUNT
        G0 X100 Y298 F5000                         ; Get in to approach postion to stow probe
        G0 X0 Y298 F1000                         ; Get in to approach postion to stow probe
        G0 X0 Y250 F2000                         ; Get in to approach postion to stow probe
        ; confirm stowing was successful
        ASSERT_PROBE_STOWED
    {% endif %}



 # Example macro to perform a bed mesh calibration by wrapping it in DEPLOY_PROBE/STOW_PROBE macros
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_ORIG
gcode:
    DEPLOY_PROBE
    BED_MESH_CALIBRATE_ORIG
    STOW_PROBE




[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_ORIG

variable_buffer: 20

gcode:
    {% set start_print  = printer["gcode_macro START_PRINT"] %}
    {% set bed_mesh     = printer.configfile.settings.bed_mesh %}
    {% set probe_config = printer.configfile.settings.probe %}

    {% if start_print.first_layer_min_xy and start_print.first_layer_max_xy %}
        { action_respond_info("print_min: {}".format(start_print.first_layer_min_xy)) }
        { action_respond_info("print_max: {}".format(start_print.first_layer_max_xy)) }

        {% set print_min_x = (start_print.first_layer_min_xy[0] | float) + probe_config.x_offset %}
        {% set print_min_y = (start_print.first_layer_min_xy[1] | float) + probe_config.y_offset %}
        {% set print_max_x = (start_print.first_layer_max_xy[0] | float) + probe_config.x_offset %}
        {% set print_max_y = (start_print.first_layer_max_xy[1] | float) + probe_config.y_offset %}

        DEPLOY_PROBE

        {% if (print_min_x < print_max_x) and (print_min_y < print_max_y) %}

            {% set minimum_probe_count = 5 if bed_mesh.algorithm == "bicubic" else 3 %}

            # bed_mesh.probe_count is a tuple
            {% set probe_count = bed_mesh.probe_count %}
            {% set probe_count_x = probe_count[0] %}
            {% set probe_count_y = probe_count[1] if (probe_count | length) == 2 else probe_count_x %}

            # -1 is the effective, undocumented default
            
			{% set zero_reference_position  = bed_mesh.zero_reference_position  %}
            {% set mesh_min_x, mesh_min_y = bed_mesh.mesh_min %}
            {% set mesh_max_x, mesh_max_y = bed_mesh.mesh_max %}

            # If print area X is smaller than 50% of the bed size, use the
            # minimum probe count for X instead of the default
            {% if (print_max_x - print_min_x) < (mesh_max_x - mesh_min_x)/2 %}
                {% set probe_count_x = minimum_probe_count %}
            {% endif %}

            # If print area Y is smaller than 50% of the bed size, use the
            # minimum probe count for Y instead of the default
            {% if (print_max_y - print_min_y) < (mesh_max_y - mesh_min_y)/2 %}
                {% set probe_count_y = minimum_probe_count %}
            {% endif %}

           
            {% set mesh_min_x = [print_min_x - buffer, mesh_min_x] | max %}
            {% set mesh_min_y = [print_min_y - buffer, mesh_min_y] | max %}
            {% set mesh_max_x = [print_max_x + buffer, mesh_max_x] | min %}
            {% set mesh_max_y = [print_max_y + buffer, mesh_max_y] | min %}

            { action_respond_info("mesh_min: ({}, {})".format(mesh_min_x, mesh_min_y)) }
            { action_respond_info("mesh_max: ({}, {})".format(mesh_max_x, mesh_max_y)) }
            { action_respond_info("probe_count: ({}, {})".format(probe_count_x,probe_count_y)) }
            

            BED_MESH_CALIBRATE_ORIG mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y} zero_reference_position={zero_reference_position}

        {% else %}
            BED_MESH_CALIBRATE_ORIG
        {% endif %}

        STOW_PROBE

    {% else %}
        DEPLOY_PROBE

        BED_MESH_CALIBRATE_ORIG

        STOW_PROBE
    {% endif %}








[gcode_macro PROBE_CALIBRATE]
rename_existing: PROBE_CALIBRATE_ORIG
gcode:
    {% set euclid_probe = printer["gcode_macro EuclidProbe"] %}  # this is the contents of line 144
    DEPLOY_PROBE
    G90
    G0 Z20
    G0 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y/2 } F5000 
    PROBE_CALIBRATE_ORIG
    STOW_PROBE
    G90
    G0 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y/2 } F5000 

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_ORIGINIAL
gcode:
    QUERY_PROBE
    M401
    BED_MESH_CALIBRATE_ORIGINIAL
    M402

[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    G28
    DEPLOY_PROBE
    QUAD_GANTRY_LEVEL_ORIGINIAL
    G28
    M118 Stowing Euclid Probe.
    STOW_PROBE
    QUERY_PROBE

[gcode_macro M401]
gcode:
    DEPLOY_PROBE

# M402 - Stow Euclid Probe
[gcode_macro M402]
gcode:
    STOW_PROBE
   
[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: QUAD_GANTRY_LEVEL_ORIGINIAL
gcode:
    QUERY_PROBE
    M401
    QUAD_GANTRY_LEVEL_ORIGINIAL
    M402